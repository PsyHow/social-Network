{"version":3,"file":"static/js/285.b0ce03a3.chunk.js","mappings":"uPAyCaA,GAAiBC,EAAAA,EAAAA,GAAgD,CAC5EC,KAAM,SADsBD,EA5B1B,SAAC,GAAD,IAAGE,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,WAAxB,OACF,kBAAMC,SAAUH,EAAhB,WACE,0BACE,SAACI,EAAA,EAAD,CAAOC,UAAWC,EAAAA,GAAOC,SAAU,CAACC,EAAAA,GAAWC,KAAK,QAAQC,YAAY,aAE1E,0BACE,SAACN,EAAA,EAAD,CACEC,UAAWC,EAAAA,GACXC,SAAU,CAACC,EAAAA,GACXC,KAAK,WACLE,KAAK,WACLD,YAAY,gBAGhB,4BACE,SAACN,EAAA,EAAD,CAAOC,UAAWC,EAAAA,GAAOK,KAAK,WAAWF,KAAK,eADhD,iBAICP,IAAc,gBAAKU,IAAI,UAAUC,IAAKX,IACtCA,IAAcY,EAAAA,EAAAA,IAAY,qBAAsB,UAAW,CAACN,EAAAA,GAAWF,EAAAA,IAEvEL,IAAS,gBAAKc,UAAWC,EAAAA,EAAAA,iBAAhB,SAA0Cf,KACpD,0BACE,mBAAQU,KAAK,SAAb,2B,UCON,GAZuBM,EAAAA,EAAAA,KALC,SAACC,GAAD,MAA+C,CACrEC,OAAQD,EAAME,KAAKD,OACnBjB,WAAYgB,EAAME,KAAKlB,cAGuB,CAAEmB,MAAAA,EAAAA,GAAOC,OAAAA,EAAAA,IAAlCL,EArBW,SAAC,GAAmC,IAAjCI,EAAgC,EAAhCA,MAAOF,EAAyB,EAAzBA,OAAQjB,EAAiB,EAAjBA,WAKlD,OAAIiB,GACK,SAAC,KAAD,CAAUI,GAAG,cAGpB,4BACE,mCACA,SAAC1B,EAAD,CAAgBM,SAVH,SAACqB,GAChBH,EAAMG,EAASC,MAAOD,EAASE,SAAUF,EAASG,WAAYH,EAASI,UASjC1B,WAAYA,W,4ECrB/C,IAAMM,EAAW,SAACqB,GACvB,IAAIA,EAEJ,MAAO,qBAEIC,EAAmB,SAACC,GAAD,OAAuB,SAACF,GACtD,GAAIA,EAAMG,OAASD,EAAW,MAAM,iBAAN,OAAwBA,EAAxB","sources":["components/login/LoginForm/LoginForm.tsx","components/login/Login.tsx","utils/validators/validators.ts"],"sourcesContent":["import React, { FC } from 'react';\r\n\r\nimport { Field, InjectedFormProps, reduxForm } from 'redux-form';\r\n\r\nimport styles from '../../common/FormsControl/FormsControl.module.css';\r\n\r\nimport { Input } from 'components';\r\nimport { createField } from 'components/common/FormsControl/FormsControl';\r\nimport { Nullable } from 'types';\r\nimport { required } from 'utils';\r\n\r\nconst LoginForm: FC<\r\n  InjectedFormProps<LoginFormDataType, LoginFormOwnTypes> & LoginFormOwnTypes\r\n> = ({ handleSubmit, error, captchaUrl }) => (\r\n  <form onSubmit={handleSubmit}>\r\n    <div>\r\n      <Field component={Input} validate={[required]} name=\"email\" placeholder=\"Email\" />\r\n    </div>\r\n    <div>\r\n      <Field\r\n        component={Input}\r\n        validate={[required]}\r\n        name=\"password\"\r\n        type=\"password\"\r\n        placeholder=\"password\"\r\n      />\r\n    </div>\r\n    <div>\r\n      <Field component={Input} type=\"checkbox\" name=\"rememberMe\" />\r\n      Remember me\r\n    </div>\r\n    {captchaUrl && <img alt=\"captcha\" src={captchaUrl} />}\r\n    {captchaUrl && createField('Symbols from image', 'captcha', [required], Input)}\r\n\r\n    {error && <div className={styles.formSummaryError}>{error}</div>}\r\n    <div>\r\n      <button type=\"submit\">Login</button>\r\n    </div>\r\n  </form>\r\n);\r\n\r\nexport const LoginReduxForm = reduxForm<LoginFormDataType, LoginFormOwnTypes>({\r\n  form: 'login',\r\n})(LoginForm);\r\n\r\n// types\r\nexport type LoginFormDataType = {\r\n  email: string;\r\n  password: string;\r\n  rememberMe: boolean;\r\n  captcha: string;\r\n};\r\n\r\ntype LoginFormOwnTypes = {\r\n  captchaUrl: Nullable<string>;\r\n};\r\n","import { FC } from 'react';\r\n\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nimport { LoginFormDataType, LoginReduxForm } from './LoginForm/LoginForm';\r\n\r\nimport { login, logout, AppStateType } from 'BLL';\r\nimport { Nullable } from 'types';\r\n\r\nconst Login: FC<LoginPropsType> = ({ login, isAuth, captchaUrl }) => {\r\n  const onSubmit = (formData: LoginFormDataType) => {\r\n    login(formData.email, formData.password, formData.rememberMe, formData.captcha);\r\n  };\r\n\r\n  if (isAuth) {\r\n    return <Redirect to=\"/profile\" />;\r\n  }\r\n  return (\r\n    <div>\r\n      <h1>Login</h1>\r\n      <LoginReduxForm onSubmit={onSubmit} captchaUrl={captchaUrl} />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst MapStateToProps = (state: AppStateType): MapStateToPropsType => ({\r\n  isAuth: state.auth.isAuth,\r\n  captchaUrl: state.auth.captchaUrl,\r\n});\r\n\r\nconst LoginContainer = connect(MapStateToProps, { login, logout })(Login);\r\n\r\n// types\r\ntype MapDispatchToPropsType = {\r\n  login: (email: string, password: string, rememberMe: boolean, captcha: string) => void;\r\n};\r\ntype MapStateToPropsType = {\r\n  isAuth: boolean;\r\n  captchaUrl: Nullable<string>;\r\n};\r\ntype LoginPropsType = MapDispatchToPropsType & MapStateToPropsType;\r\n\r\nexport default LoginContainer;\r\n","export const required = (value: any) => {\r\n  if (value) return undefined;\r\n\r\n  return 'Field is required';\r\n};\r\nexport const maxLengthCreator = (maxLength: number) => (value: string) => {\r\n  if (value.length > maxLength) return `Max length is ${maxLength} symbol`;\r\n\r\n  return undefined;\r\n};\r\n\r\nexport type FieldValidatorType = (value: string) => string | undefined;\r\n"],"names":["LoginReduxForm","reduxForm","form","handleSubmit","error","captchaUrl","onSubmit","Field","component","Input","validate","required","name","placeholder","type","alt","src","createField","className","styles","connect","state","isAuth","auth","login","logout","to","formData","email","password","rememberMe","captcha","value","maxLengthCreator","maxLength","length"],"sourceRoot":""}