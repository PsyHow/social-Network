{"version":3,"file":"static/js/749.987d8b7e.chunk.js","mappings":"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","sources":["components/Profile/MyPosts/AddPostForm/AddPostForm.tsx","components/Profile/MyPosts/MyPosts.module.css","webpack://my-app/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPost.tsx","components/Profile/MyPosts/MyPostContainer.tsx","webpack://my-app/./src/components/Profile/Profile.module.css?b512","webpack://my-app/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileStatusWithHook.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/Profile.tsx","selectors/profileSelector.ts","components/Profile/ProfileContainer.tsx","utils/validators/validators.ts"],"sourcesContent":["import React from 'react';\r\n\r\nimport { Field, InjectedFormProps, reduxForm } from 'redux-form';\r\n\r\nimport { TextArea } from 'components';\r\nimport { maxMessageLength } from 'constants/constants';\r\nimport { maxLengthCreator, required } from 'utils';\r\n\r\nconst maxLength = maxLengthCreator(maxMessageLength);\r\nconst AddPostFormC = ({ handleSubmit }: InjectedFormProps<FormPostDataType>) => (\r\n  <form onSubmit={handleSubmit}>\r\n    <div>\r\n      <Field\r\n        component={TextArea}\r\n        name=\"newPostMessage\"\r\n        placeholder=\"Enter your message\"\r\n        validate={[required, maxLength]}\r\n      />\r\n    </div>\r\n    <div>\r\n      <button type=\"submit\">Send post</button>\r\n    </div>\r\n  </form>\r\n);\r\n\r\nexport const AddPostForm = reduxForm<FormPostDataType>({ form: 'PostMessageForm' })(\r\n  AddPostFormC,\r\n);\r\n\r\n// types\r\nexport type FormPostDataType = {\r\n  newPostMessage: string;\r\n};\r\n","// extracted by mini-css-extract-plugin\nexport default {};","// extracted by mini-css-extract-plugin\nexport default {\"PostWrapper\":\"Post_PostWrapper__18qHa\",\"box1\":\"Post_box1__RSZL-\",\"ava\":\"Post_ava__hpmPg\",\"box2\":\"Post_box2__DzRAT\",\"box3\":\"Post_box3__OxIFQ\"};","import { FC } from 'react';\r\n\r\nimport style from './Post.module.css';\r\n\r\nexport const Post: FC<PropsType> = ({ message, likesCount }) => (\r\n  <div className={style.PostWrapper}>\r\n    <div className={style.box1}>\r\n      <div className={style.ava}>\r\n        <img\r\n          alt=\"avatar\"\r\n          src=\"https://mir-s3-cdn-cf.behance.net/project_modules/disp/ce54bf11889067.562541ef7cde4.png\"\r\n        />\r\n      </div>\r\n    </div>\r\n    <div className={style.box2}>{message}</div>\r\n    <div className={style.box3}>{likesCount}</div>\r\n  </div>\r\n);\r\n\r\n// types\r\ntype PropsType = {\r\n  message: string;\r\n  likesCount: number;\r\n};\r\n","import { FC, memo } from 'react';\r\n\r\nimport { AddPostForm, FormPostDataType } from './AddPostForm/AddPostForm';\r\nimport styles from './MyPosts.module.css';\r\nimport { Post } from './Post/Post';\r\n\r\nimport { PostType } from 'types';\r\n\r\nexport const MyPost: FC<PropsType> = memo(({ posts, addPost }) => {\r\n  const myPosts = posts.map(p => (\r\n    <Post key={p.id} message={p.message} likesCount={p.likesCount} />\r\n  ));\r\n\r\n  const addNewPost = (formData: FormPostDataType) => {\r\n    addPost(formData.newPostMessage);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className={styles.posts}>{myPosts}</div>\r\n      <AddPostForm onSubmit={addNewPost} />\r\n    </div>\r\n  );\r\n});\r\n\r\n// types\r\ntype PropsType = {\r\n  addPost: (newPostMessage: string) => void;\r\n  posts: PostType[];\r\n};\r\n","import { connect } from 'react-redux';\r\n\r\nimport { MyPost } from './MyPost';\r\n\r\nimport { addPost, AppStateType } from 'BLL';\r\nimport { PostType } from 'types';\r\n\r\nconst mapStateToProps = (state: AppStateType): MatStateToPropsType => ({\r\n  posts: state.profilePage.post,\r\n});\r\n\r\nexport const MyPostContainer = connect(mapStateToProps, {\r\n  addPost,\r\n})(MyPost);\r\n\r\n// types\r\ntype MatStateToPropsType = {\r\n  posts: PostType[];\r\n};\r\n","// extracted by mini-css-extract-plugin\nexport default {\"profileWrapper\":\"Profile_profileWrapper__5JzAw\"};","// extracted by mini-css-extract-plugin\nexport default {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__Vne6W\",\"wrapper\":\"ProfileInfo_wrapper__ILeOL\",\"description\":\"ProfileInfo_description__VR90W\",\"ava\":\"ProfileInfo_ava__9ltgG\",\"img\":\"ProfileInfo_img__SPRZB\",\"info\":\"ProfileInfo_info__b2KAc\",\"toggle\":\"ProfileInfo_toggle__b5OPD\",\"contacts\":\"ProfileInfo_contacts__zdHWt\"};","import { ChangeEvent, FC, useEffect, useState } from 'react';\r\n\r\nexport const ProfileStatusWithHooks: FC<PropsType> = ({ status, updateStatus }) => {\r\n  const [editMode, setEditMode] = useState(false);\r\n  const [myStatus, setMyStatus] = useState(status);\r\n\r\n  useEffect(() => {\r\n    setMyStatus(status);\r\n  }, [status]);\r\n\r\n  const activateMode = () => {\r\n    setEditMode(true);\r\n  };\r\n\r\n  const diactivateMode = () => {\r\n    setEditMode(false);\r\n    updateStatus(myStatus);\r\n  };\r\n\r\n  const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n    setMyStatus(e.currentTarget.value);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {!editMode && (\r\n        <div style={{ marginTop: '20px' }}>\r\n          <b>Status: </b>\r\n          <span onDoubleClick={activateMode}>{status || 'Enter your status'}</span>\r\n        </div>\r\n      )}\r\n      {editMode && (\r\n        <div style={{ marginTop: '20px' }}>\r\n          <input\r\n            onBlur={diactivateMode}\r\n            // eslint-disable-next-line jsx-a11y/no-autofocus\r\n            autoFocus\r\n            onChange={onStatusChange}\r\n            value={myStatus}\r\n          />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\n// types\r\ntype PropsType = {\r\n  status: string;\r\n  updateStatus: (status: string) => void;\r\n};\r\n","import React, { FC } from 'react';\r\n\r\nimport { InjectedFormProps, reduxForm } from 'redux-form';\r\n\r\nimport style from './ProfileInfo.module.css';\r\n\r\nimport {\r\n  createField,\r\n  GetStringKeys,\r\n  Input,\r\n  TextArea,\r\n} from 'components/common/FormsControl/FormsControl';\r\nimport styles from 'components/common/FormsControl/FormsControl.module.css';\r\nimport { UserProfileType } from 'types';\r\n\r\ntype ProfileTypeKeys = GetStringKeys<UserProfileType>;\r\n\r\ntype PropsType = {\r\n  profile: UserProfileType;\r\n};\r\n\r\nconst ProfileDataForm: FC<InjectedFormProps<UserProfileType, PropsType> & PropsType> = ({\r\n  handleSubmit,\r\n  profile,\r\n  error,\r\n}) => (\r\n  <form onSubmit={handleSubmit}>\r\n    <div>\r\n      <button type=\"submit\">save</button>\r\n    </div>\r\n    {error && <div className={styles.formSummaryError}>{error}</div>}\r\n    <div>\r\n      <b>Full Name: </b>\r\n      {createField<ProfileTypeKeys>('Full Name', 'fullName', [], Input)}\r\n    </div>\r\n    <div>\r\n      <b>Looking for a job:</b>\r\n      {createField<ProfileTypeKeys>('', 'lookingForAJob', [], Input, {\r\n        type: 'checkbox',\r\n      })}\r\n    </div>\r\n    <div>\r\n      <b>My professional skills: </b>\r\n      {createField<ProfileTypeKeys>(\r\n        'My skills',\r\n        'lookingForAJobDescription',\r\n        [],\r\n        TextArea,\r\n      )}\r\n    </div>\r\n    <div>\r\n      <b>About me: </b>\r\n      {createField<ProfileTypeKeys>('About me', 'aboutMe', [], TextArea)}\r\n    </div>\r\n    <div>\r\n      <b>Contacts</b>:{' '}\r\n      {Object.keys(profile.contacts).map(key => (\r\n        <div key={key} className={style.contact}>\r\n          <b>\r\n            {key}: {createField(key, `contacts.${key}`, [], Input)}\r\n          </b>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  </form>\r\n);\r\n\r\nconst ProfileDataFormReduxForm = reduxForm<UserProfileType, PropsType>({\r\n  form: 'edit-profile',\r\n})(ProfileDataForm);\r\n\r\nexport default ProfileDataFormReduxForm;\r\n","import { ChangeEvent, FC, useState } from 'react';\r\n\r\nimport profileImg from '../../../assets/images/338-3388366_meme-for-steam-avatars-hd-png-download.png';\r\n\r\nimport styles from './ProfileInfo.module.css';\r\nimport { ProfileStatusWithHooks } from './ProfileStatusWithHook';\r\n\r\nimport { Preloader } from 'components';\r\nimport ProfileDataForm from 'components/Profile/ProfileInfo/ProfileDataForm';\r\nimport { ContactsType, Nullable, UserProfileType } from 'types';\r\n\r\nexport const Contact = ({ contactTitle, contactValue }: ContactPropsType) => (\r\n  <div className={styles.contacts}>\r\n    <b>{contactTitle}</b>\r\n    {contactValue}\r\n  </div>\r\n);\r\n\r\nconst ProfileData: FC<ProfileDataProps> = ({ profile, isOwner, goToEditMode }) => (\r\n  <div>\r\n    {isOwner && (\r\n      <div>\r\n        <button type=\"button\" onClick={goToEditMode}>\r\n          edit\r\n        </button>\r\n      </div>\r\n    )}\r\n    <div>\r\n      <b>Full Name: </b> {profile.fullName}\r\n    </div>\r\n    <div>\r\n      <b>Looking for a job:</b> {profile.lookingForAJob ? 'yes' : 'no'}\r\n    </div>\r\n    {profile.lookingForAJob && (\r\n      <div>\r\n        <b>My professional skills: </b> {profile.lookingForAJobDescription}\r\n      </div>\r\n    )}\r\n    <div>\r\n      <b>About me: </b> {profile.aboutMe}\r\n    </div>\r\n    <div>\r\n      <b>Contacts:</b>{' '}\r\n      {Object.keys(profile.contacts).map(key => (\r\n        <Contact\r\n          key={key}\r\n          contactTitle={key}\r\n          contactValue={profile.contacts[key as keyof ContactsType]}\r\n        />\r\n      ))}\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport const ProfileInfo: FC<PropsType> = ({\r\n  status,\r\n  profile,\r\n  updateStatus,\r\n  isOwner,\r\n  savePhoto,\r\n  saveProfile,\r\n}) => {\r\n  const [editMode, setEditMode] = useState<boolean>(false);\r\n\r\n  if (!profile) {\r\n    return <Preloader />;\r\n  }\r\n\r\n  const onMainPhotoSelected = (event: ChangeEvent<HTMLInputElement>) => {\r\n    if (event.target.files && event.target.files.length) {\r\n      // eslint-disable-next-line @typescript-eslint/no-magic-numbers\r\n      savePhoto(event.target.files[0]);\r\n    }\r\n  };\r\n\r\n  const onSubmit = (formData: UserProfileType) => {\r\n    saveProfile(formData).then(() => {\r\n      setEditMode(false);\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className={styles.wrapper}>\r\n      <div className={styles.description}>\r\n        <div className={styles.info}>\r\n          <ProfileStatusWithHooks status={status} updateStatus={updateStatus} />\r\n\r\n          {editMode ? (\r\n            <ProfileDataForm\r\n              initialValues={profile}\r\n              onSubmit={onSubmit}\r\n              profile={profile}\r\n            />\r\n          ) : (\r\n            <ProfileData\r\n              profile={profile}\r\n              isOwner={isOwner}\r\n              goToEditMode={() => setEditMode(true)}\r\n            />\r\n          )}\r\n        </div>\r\n      </div>\r\n      <div className={styles.ava}>\r\n        <div className={styles.img}>\r\n          {isOwner && <input type=\"file\" onChange={onMainPhotoSelected} />}\r\n          <img alt=\"avatar\" src={profile.photos.large || profileImg} />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n// types\r\ntype PropsType = {\r\n  profile: Nullable<UserProfileType>;\r\n  status: string;\r\n  updateStatus: (status: string) => void;\r\n  isOwner: boolean;\r\n  savePhoto: (file: File) => void;\r\n  saveProfile: (profile: UserProfileType) => Promise<any>;\r\n};\r\n\r\ntype ContactPropsType = {\r\n  contactTitle: string;\r\n  contactValue: string;\r\n};\r\n\r\ntype ProfileDataProps = {\r\n  profile: UserProfileType;\r\n  isOwner: boolean;\r\n  goToEditMode: () => void;\r\n};\r\n","import { FC } from 'react';\r\n\r\nimport { MyPostContainer } from './MyPosts/MyPostContainer';\r\nimport styles from './Profile.module.css';\r\nimport { ProfileInfo } from './ProfileInfo/ProfileInfo';\r\n\r\nimport { Nullable, UserProfileType } from 'types';\r\n\r\nexport const Profile: FC<PropsType> = ({\r\n  profile,\r\n  status,\r\n  updateStatus,\r\n  isOwner,\r\n  savePhoto,\r\n  saveProfile,\r\n}) => (\r\n  <div className={styles.profileWrapper}>\r\n    <ProfileInfo\r\n      isOwner={isOwner}\r\n      profile={profile}\r\n      status={status}\r\n      updateStatus={updateStatus}\r\n      savePhoto={savePhoto}\r\n      saveProfile={saveProfile}\r\n    />\r\n    <MyPostContainer />\r\n  </div>\r\n);\r\n\r\n// types\r\ntype PropsType = {\r\n  profile: Nullable<UserProfileType>;\r\n  status: string;\r\n  updateStatus: (status: string) => void;\r\n  isOwner: boolean;\r\n  savePhoto: (file: File) => void;\r\n  saveProfile: (profile: UserProfileType) => Promise<any>;\r\n};\r\n","import { AppStateType } from 'BLL';\r\n\r\nexport const getProfile = (state: AppStateType) => state.profilePage.profile;\r\nexport const getProfileStatus = (state: AppStateType) => state.profilePage.status;\r\n","import { Component, ComponentType } from 'react';\r\n\r\nimport { connect } from 'react-redux';\r\nimport { RouteComponentProps, withRouter } from 'react-router-dom';\r\nimport { compose } from 'redux';\r\n\r\nimport { Profile } from './Profile';\r\n\r\nimport { AppStateType, getStatus, updateStatus } from 'BLL';\r\nimport { getUserProfile, savePhoto, saveProfile } from 'BLL/profileReducer/Thunk';\r\nimport { getAuthID, getIsAuth, getProfile, getProfileStatus } from 'selectors';\r\nimport { Nullable, UserProfileType } from 'types';\r\n\r\nclass ProfileContainer extends Component<PropsType> {\r\n  componentDidMount() {\r\n    this.refreshProfile();\r\n  }\r\n\r\n  componentDidUpdate(prevProps: PropsType) {\r\n    const { match } = this.props;\r\n    if (match.params.userId !== prevProps.match.params.userId) {\r\n      this.refreshProfile();\r\n    }\r\n  }\r\n\r\n  refreshProfile() {\r\n    const { match, authorizedUserId, history, getUserProfile, getStatus } = this.props;\r\n    let userId: number | null = +match.params.userId;\r\n    if (!userId) {\r\n      userId = authorizedUserId;\r\n      if (!userId) {\r\n        history.push('/login');\r\n      }\r\n    }\r\n    if (!userId) {\r\n      console.error(\"ID should exists in URI params or in state ('authorizedUserId')\");\r\n    } else {\r\n      getUserProfile(userId);\r\n      getStatus(userId);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { profile, status, updateStatus, match, savePhoto, saveProfile } = this.props;\r\n    return (\r\n      <div>\r\n        <Profile\r\n          profile={profile}\r\n          status={status}\r\n          updateStatus={updateStatus}\r\n          isOwner={!match.params.userId}\r\n          savePhoto={savePhoto}\r\n          saveProfile={saveProfile}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => ({\r\n  profile: getProfile(state),\r\n  status: getProfileStatus(state),\r\n  authorizedUserId: getAuthID(state),\r\n  isAuth: getIsAuth(state),\r\n});\r\n\r\n// important type compose with generic <React.ComponentType>\r\nexport default compose<ComponentType>(\r\n  connect(mapStateToProps, {\r\n    getUserProfile,\r\n    getStatus,\r\n    updateStatus,\r\n    savePhoto,\r\n    saveProfile,\r\n  }),\r\n  withRouter,\r\n)(ProfileContainer);\r\n\r\n// types\r\ntype MapDispatchToPropsType = {\r\n  getUserProfile: (userId: number) => void;\r\n  getStatus: (userId: number) => void;\r\n  updateStatus: (status: string) => void;\r\n  savePhoto: (file: File) => void;\r\n  saveProfile: (profile: UserProfileType) => Promise<any>;\r\n};\r\n\r\ntype MapStateToPropsType = {\r\n  profile: Nullable<UserProfileType>;\r\n  status: string;\r\n  authorizedUserId: Nullable<number>;\r\n  isAuth: boolean;\r\n};\r\n\r\ntype PathParamsType = {\r\n  userId: string;\r\n};\r\n\r\ntype PropsType = RouteComponentProps<PathParamsType> &\r\n  MapDispatchToPropsType &\r\n  MapStateToPropsType;\r\n","export const required = (value: any) => {\r\n  if (value) return undefined;\r\n\r\n  return 'Field is required';\r\n};\r\nexport const maxLengthCreator = (maxLength: number) => (value: string) => {\r\n  if (value.length > maxLength) return `Max length is ${maxLength} symbol`;\r\n\r\n  return undefined;\r\n};\r\n\r\nexport type FieldValidatorType = (value: string) => string | undefined;\r\n"],"names":["maxLength","maxLengthCreator","maxMessageLength","AddPostForm","reduxForm","form","handleSubmit","onSubmit","Field","component","TextArea","name","placeholder","validate","required","type","Post","message","likesCount","className","style","alt","src","MyPost","memo","posts","addPost","myPosts","map","p","id","styles","formData","newPostMessage","MyPostContainer","connect","state","profilePage","post","ProfileStatusWithHooks","status","updateStatus","useState","editMode","setEditMode","myStatus","setMyStatus","useEffect","marginTop","onDoubleClick","onBlur","autoFocus","onChange","e","currentTarget","value","profile","error","createField","Input","Object","keys","contacts","key","Contact","contactTitle","contactValue","ProfileData","isOwner","goToEditMode","onClick","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","ProfileInfo","savePhoto","saveProfile","initialValues","then","event","target","files","length","photos","large","profileImg","Profile","getProfile","getProfileStatus","ProfileContainer","this","refreshProfile","prevProps","props","match","params","userId","authorizedUserId","history","getUserProfile","getStatus","push","console","Component","compose","getAuthID","isAuth","getIsAuth","withRouter"],"sourceRoot":""}