{"version":3,"file":"static/js/573.90289a2f.chunk.js","mappings":"iOAQMA,GAAYC,EAAAA,EAAAA,GAAiBC,EAAAA,GAoBtBC,GAAiBC,EAAAA,EAAAA,GAA+B,CAC3DC,KAAM,wBADsBD,EAlBsC,SAAC,GAAD,IAClEE,EADkE,EAClEA,aADkE,OAGlE,kBAAMC,SAAUD,EAAhB,WACE,0BACE,SAACE,EAAA,EAAD,CACEC,UAAWC,EAAAA,GACXC,KAAK,iBACLC,YAAY,qBACZC,SAAU,CAACC,EAAAA,EAAUd,QAGzB,0BACE,mBAAQe,KAAK,SAAb,0BCtBN,GAAgB,QAAU,yBAAyB,aAAe,8BAA8B,SAAW,0BAA0B,OAAS,wBAAwB,OAAS,wBAAwB,OAAS,yB,UCKnMC,EAA6B,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,GAAIN,EAAW,EAAXA,KACzCO,EAAI,mBAAeD,GAEzB,OACE,iBAAKE,UAAWC,EAAAA,OAAhB,WACE,gBACEC,IAAI,SACJC,IAAI,2HAEN,SAAC,KAAD,CAASC,gBAAiBH,EAAAA,OAAcI,GAAIN,EAA5C,SACGP,QCZIc,EAAyB,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OACpC,0BACE,gBAAKP,UAAWC,EAAAA,QAAhB,SAAgCM,O,qDCK9BC,EAAkB,SAACC,GAAD,MAA+C,CACrEC,OAAQD,EAAME,KAAKD,SCVd,IAAME,EAAa,SAACH,GAAD,OAAyBA,EAAMI,YAAYC,SACxDC,EAAc,SAACN,GAAD,OAAyBA,EAAMI,YAAYG,UCyBtE,GAXyBC,EAAAA,EAAAA,KACvBC,EAAAA,EAAAA,KANsB,SAACT,GAAD,MAA+C,CACrEK,QAASF,EAAWH,GACpBO,SAAUD,EAAYN,MAIG,CAAEU,YAAAA,EAAAA,MFHtB,SAA6BC,GAUlC,OAFmCF,EAAAA,EAAAA,IAAQV,EAARU,EAPgB,SAAC,GAA8B,IAA5BR,EAA2B,EAA3BA,OAAWW,GAAgB,YAC/E,OAAKX,GAGE,SAACU,GAAD,UAAgBC,KAHH,SAAC,KAAD,CAAUhB,GAAG,gBEAZY,ECRa,SAAC,GAAwC,IAAtCE,EAAqC,EAArCA,YAAaL,EAAwB,EAAxBA,QAASE,EAAe,EAAfA,SACvDM,EAAkBR,EAAQS,KAAI,SAAAC,GAAM,OACxC,SAAC3B,EAAD,CAA6BL,KAAMgC,EAAOhC,KAAMM,GAAI0B,EAAO1B,IAAzC0B,EAAO1B,OAGrB2B,EAAmBT,EAASO,KAAI,SAAAhB,GAAO,OAC3C,SAACD,EAAD,CAA0BC,QAASA,EAAQA,SAA7BA,EAAQT,OAOxB,OACE,iBAAKE,UAAWC,EAAAA,QAAhB,WACE,gBAAKD,UAAWC,EAAAA,aAAhB,SAAqCqB,KACrC,iBAAKtB,UAAWC,EAAAA,SAAhB,WACE,yBAAMwB,KACN,SAACzC,EAAD,CAAgBI,SATA,SAACsC,GACrBP,EAAYO,EAASC,6B,4ECnBlB,IAAMhC,EAAW,SAACiC,GACvB,IAAIA,EAEJ,MAAO,qBAEI9C,EAAmB,SAACD,GAAD,OAAuB,SAAC+C,GACtD,GAAIA,EAAMC,OAAShD,EAAW,MAAM,iBAAN,OAAwBA,EAAxB","sources":["components/Dialogs/AddMessageForm/AddMessageForm.tsx","webpack://my-app/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogsItem/DialogsItem.tsx","components/Dialogs/Message/Message.tsx","hoc/withAuthRedirect.tsx","selectors/dialogsSelector.ts","components/Dialogs/DialogsContainer.tsx","components/Dialogs/Dialogs.tsx","utils/validators/validators.ts"],"sourcesContent":["import { FC } from 'react';\r\n\r\nimport { Field, InjectedFormProps, reduxForm } from 'redux-form';\r\n\r\nimport { TextArea } from 'components';\r\nimport { maxMessageLength } from 'constants/constants';\r\nimport { maxLengthCreator, required } from 'utils';\r\n\r\nconst maxLength = maxLengthCreator(maxMessageLength);\r\n\r\nconst AddMessageFormC: FC<InjectedFormProps<FormDialogsDataType>> = ({\r\n  handleSubmit,\r\n}) => (\r\n  <form onSubmit={handleSubmit}>\r\n    <div>\r\n      <Field\r\n        component={TextArea}\r\n        name=\"newMessageBody\"\r\n        placeholder=\"Enter your message\"\r\n        validate={[required, maxLength]}\r\n      />\r\n    </div>\r\n    <div>\r\n      <button type=\"button\">send</button>\r\n    </div>\r\n  </form>\r\n);\r\n\r\nexport const AddMessageForm = reduxForm<FormDialogsDataType>({\r\n  form: 'dialogAddMessageForm',\r\n})(AddMessageFormC);\r\n\r\n// types\r\nexport type FormDialogsDataType = {\r\n  newMessageBody: string;\r\n};\r\n","// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__94146\",\"dialogsItems\":\"Dialogs_dialogsItems__tbx1X\",\"messages\":\"Dialogs_messages__xOJDd\",\"dialog\":\"Dialogs_dialog__ZxmpT\",\"active\":\"Dialogs_active__BYmr5\",\"answer\":\"Dialogs_answer__CbWvL\"};","import { FC } from 'react';\r\n\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nimport style from '../Dialogs.module.css';\r\n\r\nexport const DialogsItem: FC<PropsType> = ({ id, name }) => {\r\n  const path = `/dialogs/${id}`;\r\n\r\n  return (\r\n    <div className={style.dialog}>\r\n      <img\r\n        alt=\"avatar\"\r\n        src=\"https://cdn1.iconfinder.com/data/icons/user-interface-design-flat/60/017_-_Male_User-ui-user-interface-avatar-512.png\"\r\n      />\r\n      <NavLink activeClassName={style.active} to={path}>\r\n        {name}\r\n      </NavLink>\r\n    </div>\r\n  );\r\n};\r\n\r\n// types\r\ntype PropsType = {\r\n  id: string;\r\n  name: string;\r\n};\r\n","import { FC } from 'react';\r\n\r\nimport style from '../Dialogs.module.css';\r\n\r\nexport const Message: FC<PropsType> = ({ message }) => (\r\n  <div>\r\n    <div className={style.message}>{message}</div>\r\n  </div>\r\n);\r\n\r\n// types\r\ntype PropsType = {\r\n  message: string;\r\n};\r\n","import { ComponentType, FC } from 'react';\r\n\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nimport { AppStateType } from 'BLL';\r\n\r\ntype MapStateToPropsType = {\r\n  isAuth: boolean;\r\n};\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => ({\r\n  isAuth: state.auth.isAuth,\r\n});\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n  const RedirectComponent: FC<MapStateToPropsType> = ({ isAuth, ...restProps }) => {\r\n    if (!isAuth) return <Redirect to=\"/login\" />;\r\n\r\n    // eslint-disable-next-line react/jsx-props-no-spreading\r\n    return <Component {...(restProps as T)} />;\r\n  };\r\n\r\n  const ConnectedRedirectComponent = connect(mapStateToProps)(RedirectComponent);\r\n\r\n  return ConnectedRedirectComponent;\r\n}\r\n","import { AppStateType } from 'BLL';\r\n\r\nexport const getDialogs = (state: AppStateType) => state.dialogsPage.dialogs;\r\nexport const getMessages = (state: AppStateType) => state.dialogsPage.messages;\r\n","import { ComponentType } from 'react';\r\n\r\nimport { connect } from 'react-redux';\r\nimport { compose } from 'redux';\r\n\r\nimport { Dialogs } from './Dialogs';\r\n\r\nimport { sendMessage, AppStateType } from 'BLL';\r\nimport { withAuthRedirect } from 'hoc';\r\nimport { getDialogs, getMessages } from 'selectors';\r\nimport { DialogsType, MessagesType } from 'types';\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => ({\r\n  dialogs: getDialogs(state),\r\n  messages: getMessages(state),\r\n});\r\n// important type compose with generic <React.ComponentType>\r\nconst DialogsContainer = compose<ComponentType>(\r\n  connect(mapStateToProps, { sendMessage }),\r\n  withAuthRedirect,\r\n)(Dialogs);\r\n\r\n// types\r\ntype MapStateToPropsType = {\r\n  dialogs: DialogsType[];\r\n  messages: MessagesType[];\r\n};\r\n\r\nexport default DialogsContainer;\r\n","import { FC } from 'react';\r\n\r\nimport { AddMessageForm, FormDialogsDataType } from './AddMessageForm/AddMessageForm';\r\nimport style from './Dialogs.module.css';\r\nimport { DialogsItem } from './DialogsItem/DialogsItem';\r\nimport { Message } from './Message/Message';\r\n\r\nimport { DialogsType, MessagesType } from 'types';\r\n\r\nexport const Dialogs: FC<PropsType> = ({ sendMessage, dialogs, messages }) => {\r\n  const dialogsElements = dialogs.map(dialog => (\r\n    <DialogsItem key={dialog.id} name={dialog.name} id={dialog.id} />\r\n  ));\r\n\r\n  const messagesElements = messages.map(message => (\r\n    <Message key={message.id} message={message.message} />\r\n  ));\r\n\r\n  const addNewMessage = (formData: FormDialogsDataType) => {\r\n    sendMessage(formData.newMessageBody);\r\n  };\r\n\r\n  return (\r\n    <div className={style.dialogs}>\r\n      <div className={style.dialogsItems}>{dialogsElements}</div>\r\n      <div className={style.messages}>\r\n        <div>{messagesElements}</div>\r\n        <AddMessageForm onSubmit={addNewMessage} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n// types\r\ntype PropsType = {\r\n  sendMessage: (newMessageBody: string) => void;\r\n  dialogs: DialogsType[];\r\n  messages: MessagesType[];\r\n};\r\n","export const required = (value: any) => {\r\n  if (value) return undefined;\r\n\r\n  return 'Field is required';\r\n};\r\nexport const maxLengthCreator = (maxLength: number) => (value: string) => {\r\n  if (value.length > maxLength) return `Max length is ${maxLength} symbol`;\r\n\r\n  return undefined;\r\n};\r\n\r\nexport type FieldValidatorType = (value: string) => string | undefined;\r\n"],"names":["maxLength","maxLengthCreator","maxMessageLength","AddMessageForm","reduxForm","form","handleSubmit","onSubmit","Field","component","TextArea","name","placeholder","validate","required","type","DialogsItem","id","path","className","style","alt","src","activeClassName","to","Message","message","mapStateToProps","state","isAuth","auth","getDialogs","dialogsPage","dialogs","getMessages","messages","compose","connect","sendMessage","Component","restProps","dialogsElements","map","dialog","messagesElements","formData","newMessageBody","value","length"],"sourceRoot":""}